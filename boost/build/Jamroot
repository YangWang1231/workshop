import modules config ;

list_opts = --with-gsl= --with-blas --with-cholmod=/usr/local/cholmod --enable-DS --prefix=/usr/local/tol --with-gsl-includes=/usr/local/gsl-1.9/includes --with-gsl-libraries=/usr/local/gsl-1.9/lib ;

result = [ MATCH --with-(.+)=(.*) : $(list_opts) ] ;

# echo [ MATCH  "--(with|enable)-(.+)|(prefix)=(.+)" : --prefix ] ;
# echo [ MATCH  "--(with|enable)-(.+)|(prefix)=(.+)" : --enable-DS ] ;
# echo [ MATCH  "--(with|enable)-(.+)|(prefix)=(.+)" : --with-gsl ] ;

#ECHO $(result) ;

# "--(with|enable)-([^=]+)(=(.*))?"

local all_pkgs ;
local all_enabled ;

rule trim-left-nulls ( list * )
{
    local _list ;

    for local i in $(list)
    {
        if $(i)
        {
            _list += $(i) ;
        }
    }
    return $(_list) ;
}

rule cmdline ( options * )
{
    if $(options)
    {
        list_opts = $(options) ;
    }
    else
    {
        list_opts = [ modules.peek : ARGV ] ;
    }
    for opt in $(list_opts)
    {
        local matched = [ trim-left-nulls 
                            [ MATCH "--(with|enable)-(.+)|(prefix)=(.+)" : $(opt) ] ] ;

        # ECHO matched --> $(matched) ;

        switch $(matched[1])
        {
            case prefix :
            {
                configure prefix : $(matched[2]) ;
            }
            case with :
            {
                local with = [ trim-left-nulls [ MATCH
                                 "([^-]+)-(includes|libraries)=(.+)|([^=]+)(=(.*))?"
                                 : $(matched[2]) ] ] ;
                #ECHO $(opt) --> $(with[1]) - $(with[2]) - $(with[3]) ;
                local p = $(with[1]) ;
                if ! ( $(p) in $(all_pkgs) )
                {
                    all_pkgs += $(p) ;          
                }
                local sub_feat = $(with[2]) ;
                if [ MATCH (includes|libraries) : $(sub_feat) ]
                {
                    #ECHO "pkg_$(p)_$(sub_feat) --> $(with[3]) "  ;
                    pkg_$(p)_$(sub_feat) = $(with[3]) ;
                }
                else
                {
                   pkg_$(p)_prefix = $(with[3]) ;
                }
            }
            case enable :
            {
               all_enabled += $(matched[2]) ;
               enabled_$(matched[2]) += 1 ;
            }
        }
    }

    for local p in $(all_pkgs)
    {
        # ECHO configure $(p) - $(pkg_$(p)_includes) - $(pkg_$(p)_libraries) ;
        configure lib 
            : $(p) : $(pkg_$(p)_prefix) : $(pkg_$(p)_includes) : $(pkg_$(p)_libraries) ;
    }

    for local f in $(all_enabled)
    {
        configure enable : $(f) ;
    }
}

cmdline ;